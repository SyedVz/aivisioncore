//////////////////////////////////////////
// client registration service
//////////////////////////////////////////
[crs]
// mcity
#url = http://mcitymec.sensity.com:30989/registration
// vzmode
#url = http://reg.vzmode-br.dltdemo.io:80/registration
// AWS Wavelength public MEC
#url = http://vzmode.rkln.wl.dltdemo.io:30413/registration
#url = http://vzmode.las.wl.dltdemo.io:30413/registration
#url = http://vzmode.wdc.wl.dltdemo.io:30413/registration
url = http://vzmode.nyc.wl.dltdemo.io:30413/registration

// client_info is sent to CRS server
client_info = { "ClientInformation":{ "EntityType":"VEH", "EntitySubtype":"PSGR", "VendorID":"MCAS" }, "RSA":{ "MsgFormat":"UPER" }, "PSM":{ "MsgFormat":"UPER" }, "MAP":{ "MsgFormat":"UPER" }, "SPAT":{ "MsgFormat":"UPER" } }

// for de-registration
entity_type = VEH

// Hard-coded ID (if set, disables CRS request)
#id = 4660

//////////////////////////////////////////
// vehicleData info for BSM
//////////////////////////////////////////
[vehicleData]
length = 619
width  = 246

//////////////////////////////////////////
// MQTT
//////////////////////////////////////////
[mqtt]
// mcity
#host = mcitymec.sensity.com
#port = 30883
// vzmode
#host = mqtt.vzmode-br.dltdemo.io
#port = 1883
#client_name = AOS_OBU
// AWS Wavelength public MEC
#host = vzmode.rkln.wl.dltdemo.io
#host = vzmode.las.wl.dltdemo.io
#host = vzmode.wdc.wl.dltdemo.io
host = vzmode.nyc.wl.dltdemo.io
port = 31234

//////////////////////////////////////////
// Publisher service
//////////////////////////////////////////
[publisher]
protobuf = 1
client_name = VEH-[entity_id]-PUB-0

//////////////////////////////////////////
// MQTT publisher topics
//////////////////////////////////////////
[publisher_topics]
BSM = VZCV2X/3/IN/VEH/PSGR/MCAS/[entity_id]/UPER/BSM
OBU_ID = VZCV2X/3/OBU/ID
OBU_STATUS = VZCV2X/3/OBU/MCAS/[entity_id]/STATUS

//////////////////////////////////////////
// Subscriber service
// The "-SUB-0" suffix disables the VZMODE new architecture
//////////////////////////////////////////
[subscriber]
// client name VEH-[entity_id] will use VZMODE new architecture using version 4 with OutBoundMsg
// any other client name will disable the new arch and require explicit topic subscriptions
client_name = VEH-[entity_id]

//////////////////////////////////////////
// MQTT subscriber topics
//////////////////////////////////////////
[subscriber_topics]
RSA_EMER = VZCV2X/3/OUT/VEH/PSGR/MCAS/[entity_id]/UPER/RSA_EMER
RSA = VZCV2X/3/OUT/VEH/PSGR/MCAS/[entity_id]/UPER/RSA
TIM = VZCV2X/3/OUT/VEH/PSGR/MCAS/[entity_id]/UPER/TIM
SPAT = VZCV2X/3/OUT/VEH/PSGR/MCAS/[entity_id]/UPER/SPAT
MAP  = VZCV2X/3/OUT/VEH/PSGR/MCAS/[entity_id]/UPER/MAP

//////////////////////////////////////////
// Telemetry configuration
//////////////////////////////////////////
[telemetry]
// Log = 1 will write RTK to a local file in CSV format
log = 0

//////////////////////////////////////////
// read  data from IMU
//////////////////////////////////////////
[imu]

//////////////////////////////////////////
// read position data from RTK
//////////////////////////////////////////
[rtk_output]
// method: serial, bluetooth, captured, none
method = captured

//////////////////////////////////////////
// read position data from GPS
//////////////////////////////////////////
[gps_output]
// method: internal, none
method = none

//////////////////////////////////////////
// write correction data to RTK-GPS
//////////////////////////////////////////
[rtk_input]
// possible method: serial, bluetooth, none
method = none

//////////////////////////////////////////
// get correction data from base station
//////////////////////////////////////////
[rtk_base]
// possible methods: ntrip, none
method = none

// Verizon Hyper Precise Location(HPL) NTRIP service
host = caas.hyperlocation.io
port = 2100
mountpoint = CASTER

// Example HPL credentials sourced from a Verizon Thingspace account
// Both the long and short format are accepted
// These creds will take precedent over the fully encoded auth string below
#key = e248f9df-eae4-4d32-8365-7b0dd79cb4bc
#secret = 6062f5f3-ea37-4a9c-95e5-94b5bc2be3b5

// The Base64 encoded string contains a key:secret pair with a colon separator
// The example below is not authorized and will need to be updated with active creds
// The key:secret creds will take precedent over this auth string
#auth = Basic <Base64 encoded key:secret>
#auth = Basic ZTk0OGY5ZGYtZWTFNC00ZDMyLTgzNjUtXYZZZZQ3OWNiNGVhOjgwNzRmNWYzLWVhMzctNGE5Yy05NWU1LTk0YjViYzJiZTNiMQ==

// every Nth GGA message sent to NTRIP server
// 10/sec * 2 seconds = 20
update = 20


//////////////////////////////////////////
// Bluetooth related for connection to RTK device
//////////////////////////////////////////
[bluetooth]
// MAC address of paired Bluetooth RTK device
mac = C0:84:7D:1E:BF:1D

//////////////////////////////////////////
// Serial related for connection to RTK device
//////////////////////////////////////////
[serial]
baud = 115200

//////////////////////////////////////////
// car data subscriber (renovo)
//////////////////////////////////////////
// TODO - for future inclusion if car data becomes available.
#[car]
#enabled = 0
#topic = vzOBU/VZPHASE2
#host = 192.168.1.5
#port = 1883

//////////////////////////////////////////
//  User interface options
//////////////////////////////////////////
[ui]
// defaults to SafetyView
#app = SafetyView
app = MiniMapView
#app = IntersectionView
// Remove optional UI elements
disableTurnSignals = true
disableEmergency = true
disablePosition = true
// Timeout period for RSA message display, in milliseconds.
rsaTimeout = 10000

//////////////////////////////////////////
[logging]
//////////////////////////////////////////
// 0 turns off logging, 1 turns on logging
enabled = 1

// TODO: The following are valid levels: error, warning, info, debug, verbose
#level = verbose

// For cloud logging Loggly can be used. Provide the source token to log to a Loggly account.
#loggly_token = 8ab3d4a1-3cbd-4e30-ad4b-2726d47e3ef0

[trafficSignals]
enabled = 0
showAllApproachLanes = false

//////////////////////////////////////////
// Autonomous Vehicle MQTT Interface
//////////////////////////////////////////
[avMqttInterface]
host = 192.168.86.32
port = 1883

[avSubscriberTopics]
enabled = vz_av_dbw_enabled
accel = vz_av_dbw_accel
brake = vz_av_dbw_brake
shift = vz_av_dbw_shift
steer = vz_av_dbw_steer